name: Debug Secrets and Environment

on:
  workflow_dispatch:

jobs:
  debug-env:
    runs-on: ubuntu-latest
    steps:
      - name: Print all environment variables
        run: |
          echo "=== GitHub Default Environment Variables ==="
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Ref: $GITHUB_REF"
          echo "SHA: $GITHUB_SHA"
          echo "Workflow: $GITHUB_WORKFLOW"
          echo "Actor: $GITHUB_ACTOR"
          echo "Event: $GITHUB_EVENT_NAME"
          echo ""
          echo "=== All Environment Variables ==="
          env | sort | while IFS='=' read -r name value; do
            # Skip sensitive GitHub tokens
            if [[ "$name" == "GITHUB_TOKEN" ]] || [[ "$name" == "ACTIONS_RUNTIME_TOKEN" ]]; then
              echo "$name=<REDACTED>"
            else
              echo "$name=$value"
            fi
          done

      - name: Check available secrets
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "=== Checking Repository Secrets (as hex to avoid masking) ==="
          echo ""

          # Function to check and print secret
          check_secret() {
            local name=$1
            local value=$2
            if [ -z "$value" ]; then
              echo "$name: <NOT SET>"
            else
              # Print length and first few chars encoded
              echo -n "$name: Length=${#value}, "
              echo -n "First 8 chars (hex): "
              echo -n "$value" | head -c 8 | xxd -ps | tr -d '\n'
              echo ""
            fi
          }

          check_secret "ANTHROPIC_API_KEY" "$ANTHROPIC_API_KEY"
          check_secret "APP_ID" "$APP_ID"
          check_secret "APP_PRIVATE_KEY" "$APP_PRIVATE_KEY"
          check_secret "NEXT_PUBLIC_VIBES_ENGINEERING_PROJECT_ID" "$NEXT_PUBLIC_VIBES_ENGINEERING_PROJECT_ID"
          check_secret "NEXT_PUBLIC_SUPABASE_URL" "$NEXT_PUBLIC_SUPABASE_URL"
          check_secret "NEXT_PUBLIC_SUPABASE_ANON_KEY" "$NEXT_PUBLIC_SUPABASE_ANON_KEY"
          check_secret "VIBES_ENGINEERING_NOTIFICATION_BACKEND_ENDPOINT" "$VIBES_ENGINEERING_NOTIFICATION_BACKEND_ENDPOINT"
          check_secret "NEXT_PUBLIC_POSTHOG_KEY" "$NEXT_PUBLIC_POSTHOG_KEY"
          check_secret "NEXT_PUBLIC_POSTHOG_HOST" "$NEXT_PUBLIC_POSTHOG_HOST"
          check_secret "NEXT_PUBLIC_ALCHEMY_KEY" "$NEXT_PUBLIC_ALCHEMY_KEY"

      - name: Print full secrets as base64 (DANGEROUS - DELETE AFTER USE)
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          APP_ID: ${{ secrets.APP_ID }}
          NEXT_PUBLIC_VIBES_ENGINEERING_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_VIBES_ENGINEERING_PROJECT_ID }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          VIBES_ENGINEERING_NOTIFICATION_BACKEND_ENDPOINT: ${{ secrets.VIBES_ENGINEERING_NOTIFICATION_BACKEND_ENDPOINT }}
        run: |
          echo "=== Full Secrets (base64 encoded) ==="
          echo "‚ö†Ô∏è  WARNING: This exposes your secrets! Delete this workflow after use!"
          echo ""

          print_secret() {
            local name=$1
            local value=$2
            if [ -n "$value" ]; then
              echo "$name (base64):"
              echo "$value" | base64
              echo ""
            fi
          }

          print_secret "ANTHROPIC_API_KEY" "$ANTHROPIC_API_KEY"
          print_secret "APP_ID" "$APP_ID"
          print_secret "NEXT_PUBLIC_VIBES_ENGINEERING_PROJECT_ID" "$NEXT_PUBLIC_VIBES_ENGINEERING_PROJECT_ID"
          print_secret "NEXT_PUBLIC_SUPABASE_URL" "$NEXT_PUBLIC_SUPABASE_URL"
          print_secret "NEXT_PUBLIC_SUPABASE_ANON_KEY" "$NEXT_PUBLIC_SUPABASE_ANON_KEY"
          print_secret "VIBES_ENGINEERING_NOTIFICATION_BACKEND_ENDPOINT" "$VIBES_ENGINEERING_NOTIFICATION_BACKEND_ENDPOINT"

      - name: List all contexts
        run: |
          echo "=== GitHub Context ==="
          echo '${{ toJSON(github) }}' | jq '.' || echo "Failed to parse github context"

      - name: Security reminder
        run: |
          echo ""
          echo "üö® SECURITY REMINDER üö®"
          echo "1. This workflow exposes sensitive information!"
          echo "2. Run it only when needed"
          echo "3. DELETE this workflow file after use"
          echo "4. Check the workflow run logs are deleted"
          echo ""
          echo "To decode base64 values locally:"
          echo "echo 'base64_string_here' | base64 -d"
