name: Auto Fix Build Errors

on:
  workflow_run:
    workflows: ["Build Check"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode with sample errors'
        required: false
        type: boolean
        default: false
      branch:
        description: 'Branch to fix (for manual testing)'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  fix-build-errors:
    # Run if: build failed (not on main) OR manual trigger
    if: |
      (github.event_name == 'workflow_run' && 
       github.event.workflow_run.conclusion == 'failure' && 
       github.event.workflow_run.head_branch != 'main') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_dispatch' && (inputs.branch || github.ref) || github.event.workflow_run.head_branch }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set test mode errors
      id: test_errors
      if: github.event_name == 'workflow_dispatch' && inputs.test_mode == true
      run: |
        cat > test_errors.txt << 'EOF'
        --- Build/Lint Output ---
        
        src/components/ui/button.tsx:10:5 - error TS2322: Type 'string' is not assignable to type 'number'.
          10     const count: number = "0";
                 ~~~~~
        
        src/hooks/useMobile.ts:15:10 - error TS2305: Module '"react"' has no exported member 'useWrongHook'.
          15  import { useWrongHook } from 'react';
                      ~~~~~~~~~~~~
        
        src/app/app.tsx:25:3  error  'unusedVariable' is assigned a value but never used  @typescript-eslint/no-unused-vars
        
        ERROR: Failed to compile.
        EOF
        
        # Output the errors for use in next step
        echo "ERRORS_OUTPUT<<EOF" >> $GITHUB_OUTPUT
        cat test_errors.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Get build error logs
      id: get_logs
      uses: actions/github-script@v7
      with:
        script: |
          // For manual test mode, return the test errors
          if ('${{ github.event_name }}' === 'workflow_dispatch' && '${{ inputs.test_mode }}' === 'true') {
            console.log('Running in test mode with sample errors');
            return '${{ steps.test_errors.outputs.ERRORS_OUTPUT }}';
          }
          
          // For workflow_run trigger, get actual logs
          if ('${{ github.event_name }}' === 'workflow_run') {
            const runId = parseInt('${{ github.event.workflow_run.id }}');
            
            const { data: { jobs } } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            const failedJob = jobs.find(job => job.conclusion === 'failure');
            if (!failedJob) {
              console.log('No failed job found');
              return '';
            }
            
            console.log(`Found failed job: ${failedJob.name}`);
            
            // Download the logs
            const response = await github.request('GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: failedJob.id,
              headers: {
                Accept: 'application/vnd.github+json'
              }
            });
            
            const logs = response.data;
            
            // Extract relevant error messages
            const lines = logs.split('\n');
            const errorLines = [];
            let capturing = false;
            let inBuildSection = false;
            
            for (const line of lines) {
              // Detect build/lint sections
              if (line.includes('Run pnpm build') || line.includes('Run pnpm lint')) {
                capturing = true;
                inBuildSection = true;
                errorLines.push('\n--- Build/Lint Output ---\n');
              }
              
              // Capture TypeScript errors
              if (capturing && line.match(/error TS\d+:/)) {
                errorLines.push(line);
              }
              
              // Capture ESLint errors
              if (capturing && line.match(/\d+:\d+\s+error/)) {
                errorLines.push(line);
              }
              
              // Capture Next.js build errors
              if (capturing && (line.includes('Error:') || line.includes('ERROR'))) {
                errorLines.push(line);
              }
              
              // Capture general error indicators
              if (line.includes('##[error]')) {
                errorLines.push(line.replace('##[error]', 'ERROR:'));
              }
              
              // Stop capturing after the section
              if (inBuildSection && line.match(/##\[group\]/) && !line.includes('Run pnpm')) {
                inBuildSection = false;
              }
            }
            
            const relevantErrors = errorLines.slice(-100).join('\n'); // Last 100 error lines
            
            if (!relevantErrors.trim()) {
              console.log('No specific errors found in logs');
              return 'Build failed but no specific error messages were captured.';
            }
            
            return relevantErrors;
          }
          
          // For manual trigger without test mode
          console.log('Manual trigger - running build to check for errors');
          return 'Manual trigger - please check build output';

    - name: Create error context file
      if: steps.get_logs.outputs.result != ''
      run: |
        cat > error_context.md << 'EOF'
        # Build Error Context
        
        The build failed with the following errors:
        
        ```
        ${{ steps.get_logs.outputs.result }}
        ```
        
        Please analyze these errors and fix them following these requirements:
        1. Only fix the specific errors shown above
        2. Make minimal changes - do not refactor or improve unrelated code
        3. Preserve the existing code style and patterns
        4. Focus on TypeScript errors, ESLint violations, and import issues
        5. After making fixes, run 'pnpm build' and 'pnpm lint' to verify
        
        The project uses:
        - Next.js 15 with App Router
        - React 19 with TypeScript
        - Tailwind CSS
        - pnpm as package manager
        
        Fix the errors and ensure the build passes.
        EOF

    - name: Run Claude Code to fix errors
      if: steps.get_logs.outputs.result != ''
      uses: anthropics/claude-code-action@beta
      with:
        prompt_file: error_context.md
        anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        # Alternative: If using OAuth token from Claude Pro/Max
        # claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        max_turns: 3
        timeout_minutes: 10
        mode: agent  # Use agent mode for automated fixes without trigger checking

    - name: Check if changes were made
      id: check_changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changed files:"
          git status --porcelain
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes were made"
        fi

    - name: Commit and push fixes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Stage all changes
        git add -A
        
        # Create commit message with proper multiline format
        cat > commit_msg.txt << 'EOF'
        fix: auto-fix build errors with Claude Code
        
        Automated fix for build errors detected in workflow run #${{ github.event.workflow_run.run_number }}
        
        Fixed by Claude Code Action based on build failure analysis.
        EOF
        
        git commit -F commit_msg.txt
        
        # Push changes
        git push

    - name: Create PR comment message
      id: pr_comment
      if: steps.check_changes.outputs.changes == 'true' && github.event.workflow_run.event == 'pull_request'
      run: |
        cat > pr_comment.md << 'EOF'
        ðŸ¤– **Claude Code Auto-Fix**
        
        I've automatically fixed the build errors in this PR. The changes have been pushed to the branch.
        
        **Fixed issues:**
        - TypeScript compilation errors
        - ESLint violations
        - Import/export issues
        
        Please review the changes to ensure they align with your intentions.
        
        *Triggered by failed workflow run [#${{ github.event.workflow_run.run_number }}](${{ github.event.workflow_run.html_url }})*
        EOF
        
        # Set as output
        echo "COMMENT_BODY<<EOF" >> $GITHUB_OUTPUT
        cat pr_comment.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Comment on PR if applicable
      if: steps.check_changes.outputs.changes == 'true' && github.event.workflow_run.event == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          // Find PRs associated with this branch
          const branchName = '${{ github.event.workflow_run.head_branch }}';
          const { data: pulls } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            head: `${context.repo.owner}:${branchName}`
          });
          
          if (pulls.length > 0) {
            const pr = pulls[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: '${{ steps.pr_comment.outputs.COMMENT_BODY }}'
            });
          }

    - name: Handle no changes scenario
      if: |
        steps.check_changes.outputs.changes == 'false' && 
        steps.get_logs.outputs.result != ''
      run: |
        echo "Claude Code analyzed the errors but couldn't automatically fix them."
        echo "This might require manual intervention for:"
        echo "- Complex architectural changes"
        echo "- Missing dependencies"
        echo "- Environment configuration issues"
        exit 1